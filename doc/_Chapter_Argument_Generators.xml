<?xml version="1.0" encoding="UTF-8"?>

<!-- This is an automatically generated file. -->
<Chapter Label="Chapter_Argument_Generators">
<Heading>Argument Generators</Heading>

Functions in GAP Quickcheck are tested with random arguments. In order to provide those
arguments, the package defines generator functions that take in two arguments- a maximum
size and a random source. From now on, we will refer to functions of that form as generator
functions. The random source has to be provided so that he testing engine has
a possibility of caching seeds that result in failing tests.
<Example><![CDATA[
gap> rs := RandomSource(IsMersenneTwister, 42);
gap> Print(QuickcheckInt(10, rs), "\n");
gap> Print(QuickcheckPermutation(10, rs), "\n");
gap> Print(QuickcheckSmallPermutationGroup(10, rs), "\n");
]]></Example>


Generators are simply passed to the Expect function, which creates a random source and
constructs arguments for the tested function.
<Example><![CDATA[
gap> Expect(Size)
> .given([QuickcheckGroup])
> .to_not_break();
]]></Example>


The package also exposes functions for creating composite arguments. The simplest of these are
list and set generators. They take a generator function and return a generator function:
<Example><![CDATA[
gap> listgen := QuickcheckList(QuickcheckInt);
gap> Print(listgen(10, rs), "\n");
gap> setgen := QuickcheckSet(QuickcheckInt);
gap> Print(setgen(10, rs), "\n");
]]></Example>


One can also generate more complex objects using the object
generator. This takes in a constructor and a list of arguments generators and creates a
generator function for the specific object. For example, one can construct an Abelian Group
this way (although a generator for it is already defined in the package).
<Example><![CDATA[
gap> abeliangen := QuickcheckObject(AbelianGroup, [QuickcheckList(QuickcheckInt)]);
gap> Print(abeliangen(10, rs), "\n");
]]></Example>


Finally, a user can define their own generators. As mentioned earlier, a generator is a
function that takes in a maximum size and a random source and produces an object. We can
therefore define a new generator for positive and negative integers.
<Example><![CDATA[
gap> PosAndNegIntGen := function(max, randomsource)
>   local coin;
gap>   coin := Random(randomsource, [0..1]);
gap>   if coin = 0 then
>     return -QuickcheckInt(max, randomsource);
gap>   else
>     return QuickcheckInt(max, randomsource);
gap>   fi;
gap> end;
gap> Print(QuickcheckList(PosAndNegIntGen)(10, rs), "\n");
]]></Example>


</Chapter>

